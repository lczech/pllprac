#ifndef _PLLPRAC_MAIN
#define _PLLPRAC_MAIN

#include <vector>
#include <string>

enum InformationCriterionType {
    t_AIC,
    t_BIC
};

enum BaseFrequencyType {
    t_EMPIRICAL,
    t_ML
};

// for testing
//std::vector<std::string> MODELS = {
    //"0,0,0,0,0,0", "0,0,0,0,0,1", "0,0,0,0,1,0", "0,0,0,0,1,1", "0,0,0,0,1,2",
    //"0,0,0,1,0,0", "0,0,0,1,0,1", "0,0,0,1,0,2", "0,0,0,1,1,0", "0,0,0,1,1,1",
    //"0,0,0,1,1,2", "0,0,0,1,2,0", "0,0,0,1,2,1", "0,0,0,1,2,2", "0,0,0,1,2,3",
//};

///*
std::vector<std::string> MODELS = {
    "0,0,0,0,0,0", "0,0,0,0,0,1", "0,0,0,0,1,0", "0,0,0,0,1,1", "0,0,0,0,1,2",
    "0,0,0,1,0,0", "0,0,0,1,0,1", "0,0,0,1,0,2", "0,0,0,1,1,0", "0,0,0,1,1,1",
    "0,0,0,1,1,2", "0,0,0,1,2,0", "0,0,0,1,2,1", "0,0,0,1,2,2", "0,0,0,1,2,3",
    "0,0,1,0,0,0", "0,0,1,0,0,1", "0,0,1,0,0,2", "0,0,1,0,1,0", "0,0,1,0,1,1",
    "0,0,1,0,1,2", "0,0,1,0,2,0", "0,0,1,0,2,1", "0,0,1,0,2,2", "0,0,1,0,2,3",
    "0,0,1,1,0,0", "0,0,1,1,0,1", "0,0,1,1,0,2", "0,0,1,1,1,0", "0,0,1,1,1,1",
    "0,0,1,1,1,2", "0,0,1,1,2,0", "0,0,1,1,2,1", "0,0,1,1,2,2", "0,0,1,1,2,3",
    "0,0,1,2,0,0", "0,0,1,2,0,1", "0,0,1,2,0,2", "0,0,1,2,0,3", "0,0,1,2,1,0",
    "0,0,1,2,1,1", "0,0,1,2,1,2", "0,0,1,2,1,3", "0,0,1,2,2,0", "0,0,1,2,2,1",
    "0,0,1,2,2,2", "0,0,1,2,2,3", "0,0,1,2,3,0", "0,0,1,2,3,1", "0,0,1,2,3,2",
    "0,0,1,2,3,3", "0,0,1,2,3,4", "0,1,0,0,0,0", "0,1,0,0,0,1", "0,1,0,0,0,2",
    "0,1,0,0,1,0", "0,1,0,0,1,1", "0,1,0,0,1,2", "0,1,0,0,2,0", "0,1,0,0,2,1",
    "0,1,0,0,2,2", "0,1,0,0,2,3", "0,1,0,1,0,0", "0,1,0,1,0,1", "0,1,0,1,0,2",
    "0,1,0,1,1,0", "0,1,0,1,1,1", "0,1,0,1,1,2", "0,1,0,1,2,0", "0,1,0,1,2,1",
    "0,1,0,1,2,2", "0,1,0,1,2,3", "0,1,0,2,0,0", "0,1,0,2,0,1", "0,1,0,2,0,2",
    "0,1,0,2,0,3", "0,1,0,2,1,0", "0,1,0,2,1,1", "0,1,0,2,1,2", "0,1,0,2,1,3",
    "0,1,0,2,2,0", "0,1,0,2,2,1", "0,1,0,2,2,2", "0,1,0,2,2,3", "0,1,0,2,3,0",
    "0,1,0,2,3,1", "0,1,0,2,3,2", "0,1,0,2,3,3", "0,1,0,2,3,4", "0,1,1,0,0,0",
    "0,1,1,0,0,1", "0,1,1,0,0,2", "0,1,1,0,1,0", "0,1,1,0,1,1", "0,1,1,0,1,2",
    "0,1,1,0,2,0", "0,1,1,0,2,1", "0,1,1,0,2,2", "0,1,1,0,2,3", "0,1,1,1,0,0",
    "0,1,1,1,0,1", "0,1,1,1,0,2", "0,1,1,1,1,0", "0,1,1,1,1,1", "0,1,1,1,1,2",
    "0,1,1,1,2,0", "0,1,1,1,2,1", "0,1,1,1,2,2", "0,1,1,1,2,3", "0,1,1,2,0,0",
    "0,1,1,2,0,1", "0,1,1,2,0,2", "0,1,1,2,0,3", "0,1,1,2,1,0", "0,1,1,2,1,1",
    "0,1,1,2,1,2", "0,1,1,2,1,3", "0,1,1,2,2,0", "0,1,1,2,2,1", "0,1,1,2,2,2",
    "0,1,1,2,2,3", "0,1,1,2,3,0", "0,1,1,2,3,1", "0,1,1,2,3,2", "0,1,1,2,3,3",
    "0,1,1,2,3,4", "0,1,2,0,0,0", "0,1,2,0,0,1", "0,1,2,0,0,2", "0,1,2,0,0,3",
    "0,1,2,0,1,0", "0,1,2,0,1,1", "0,1,2,0,1,2", "0,1,2,0,1,3", "0,1,2,0,2,0",
    "0,1,2,0,2,1", "0,1,2,0,2,2", "0,1,2,0,2,3", "0,1,2,0,3,0", "0,1,2,0,3,1",
    "0,1,2,0,3,2", "0,1,2,0,3,3", "0,1,2,0,3,4", "0,1,2,1,0,0", "0,1,2,1,0,1",
    "0,1,2,1,0,2", "0,1,2,1,0,3", "0,1,2,1,1,0", "0,1,2,1,1,1", "0,1,2,1,1,2",
    "0,1,2,1,1,3", "0,1,2,1,2,0", "0,1,2,1,2,1", "0,1,2,1,2,2", "0,1,2,1,2,3",
    "0,1,2,1,3,0", "0,1,2,1,3,1", "0,1,2,1,3,2", "0,1,2,1,3,3", "0,1,2,1,3,4",
    "0,1,2,2,0,0", "0,1,2,2,0,1", "0,1,2,2,0,2", "0,1,2,2,0,3", "0,1,2,2,1,0",
    "0,1,2,2,1,1", "0,1,2,2,1,2", "0,1,2,2,1,3", "0,1,2,2,2,0", "0,1,2,2,2,1",
    "0,1,2,2,2,2", "0,1,2,2,2,3", "0,1,2,2,3,0", "0,1,2,2,3,1", "0,1,2,2,3,2",
    "0,1,2,2,3,3", "0,1,2,2,3,4", "0,1,2,3,0,0", "0,1,2,3,0,1", "0,1,2,3,0,2",
    "0,1,2,3,0,3", "0,1,2,3,0,4", "0,1,2,3,1,0", "0,1,2,3,1,1", "0,1,2,3,1,2",
    "0,1,2,3,1,3", "0,1,2,3,1,4", "0,1,2,3,2,0", "0,1,2,3,2,1", "0,1,2,3,2,2",
    "0,1,2,3,2,3", "0,1,2,3,2,4", "0,1,2,3,3,0", "0,1,2,3,3,1", "0,1,2,3,3,2",
    "0,1,2,3,3,3", "0,1,2,3,3,4", "0,1,2,3,4,0", "0,1,2,3,4,1", "0,1,2,3,4,2",
    "0,1,2,3,4,3", "0,1,2,3,4,4", "0,1,2,3,4,5"
};
//*/

// see http://en.wikipedia.org/wiki/Akaike_information_criterion
inline double AIC (double loglikelihood, int k)
{
    return 2 * (double) k - 2 * loglikelihood;
}

// see http://en.wikipedia.org/wiki/Bayesian_information_criterion
inline double BIC (double loglikelihood, int k, int n)
{
    return (double) k * log((double) n) - 2 * loglikelihood;
}

typedef struct {
    double likelihood;
    double AIC;
    double BIC;
    double rates[6];
    char   model[12];
} ModelScore;

#endif
